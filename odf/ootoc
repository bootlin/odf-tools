#!/usr/bin/env python
# 
# Generates a Table of Contents from a series of OpenOffice/LibreOffice
# Impress documents.
#
# Copyright (C) 2009-2012 Bootlin
# Author: Michael Opdenacker <michael at bootlin com>
# Home page: http://git.bootlin.com/training-scripts/
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
# 
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
# NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# You should have received a copy of the  GNU General Public License along
# with this program; if not, write  to the Free Software Foundation, Inc.,
# 675 Mass Ave, Cambridge, MA 02139, USA.

import getopt, sys
import uno
import os 

from os.path import isfile, join
from os import getcwd
from unohelper import systemPathToFileUrl, absolutize
from com.sun.star.beans import PropertyValue
from com.sun.star.style.BreakType import PAGE_BEFORE, PAGE_AFTER
from com.sun.star.text.ControlCharacter import LINE_BREAK, PARAGRAPH_BREAK, APPEND_PARAGRAPH
from com.sun.star.uno import Exception as UnoException, RuntimeException
from com.sun.star.connection import NoConnectException
from com.sun.star.lang import IllegalArgumentException
from com.sun.star.io import IOException

def usage():
    sys.stderr.write( "usage: ootoc.py --help |\n"+
                  "       [-c <connection-string> | --connection-string=<connection-string>]\n"+
		  "       [-o <outputfile> | --outfile=<outputfile>] \n"+
                  "       file1 file2 ...\n"+
                  "\n" +
                  "Generates a Table of Contents of a series of OOo Impress documents , called 'toc.odt' unless\n" +
                  "otherwise specified. It requires an OpenOffice.org instance to be running.\n" +
		  "The script and the running OpenOffice.org instance must be able to access the file with\n"+
                  "by the same system path.\n"
		  "[ To have a listening OpenOffice.org instance, just run:\n"+
		  "openoffice \"-accept=socket,host=localhost,port=2002;urp;\" ] \n"
		  "\n"+
                  "\n"+
                  "-c <connection-string> | --connection-string=<connection-string>\n" +
                  "        The connection-string part of a uno url to where the\n" +
                  "        the script should connect to in order to do the conversion.\n" +
                  "        The strings defaults to socket,host=localhost,port=2002\n"
                  "-o <outputfile> | --outfile=<outputfile>\n" +
                  "        The name of the output filename. \"output.odt\" if not specified\n"
                  )

def main():
    retVal = 0
    outputfile = "toc.odt"

    opts, args = getopt.getopt(sys.argv[1:], "hco:", ["help", "connection-string=", "outfile" ])
    url = "uno:socket,host=localhost,port=2002;urp;StarOffice.ComponentContext"

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        if o in ("-c", "--connection-string" ):
            url = "uno:" + a + ";urp;StarOffice.ComponentContext"
        if o in ("-o", "--outfile"):
            outputfile = a
        
    if not len( args ):
        usage()
        sys.exit()
    
    try:
        ctxLocal = uno.getComponentContext()
        smgrLocal = ctxLocal.ServiceManager

        resolver = smgrLocal.createInstanceWithContext(
                   "com.sun.star.bridge.UnoUrlResolver", ctxLocal )
        ctx = resolver.resolve( url )
        smgr = ctx.ServiceManager
        desktop = smgr.createInstanceWithContext("com.sun.star.frame.Desktop", ctx )
    except NoConnectException, e:
        sys.stderr.write("OpenOffice process not found or not listening (" + e.Message + ")\n")
        sys.exit(1)
    except IllegalArgumentException, e:
        sys.stderr.write("The url is invalid ( " + e.Message + ")\n")
        sys.exit(1)
    except RuntimeException, e:
        sys.stderr.write("An unknown error occured: " + e.Message + "\n")

    # Output file

    cwd = systemPathToFileUrl( getcwd() )
    destFile = absolutize( cwd, systemPathToFileUrl(outputfile) )
    inProps = PropertyValue( "Hidden" , 0 , True, 0 ),

    newdoc = desktop.loadComponentFromURL( "private:factory/swriter", "_blank", 0, inProps )
    text   = newdoc.Text
    cursor = text.createTextCursor()

    # Inits
    
    page_count = 1

    # Document header

    cursor.ParaStyleName = "Heading 1"
    text.insertString(cursor, 'Table Of Contents', False);
    text.insertControlCharacter(cursor, PARAGRAPH_BREAK, False);

    # Iterating on the various documents

    for i in args:
        if isfile(os.path.join(getcwd(), i)):
           fileUrl = absolutize( cwd, systemPathToFileUrl(i) )		            
           doc = desktop.loadComponentFromURL( fileUrl , "_blank", 0, inProps )     

	   title = doc.DocumentInfo.Title
	   cursor.ParaStyleName = "Heading 2"
	   text.insertString(cursor, title, False);
	   text.insertControlCharacter(cursor, PARAGRAPH_BREAK, False);
	   cursor.ParaStyleName = "Default"

	   pages = doc.DrawPages					            

           for j in range(pages.Count):
	       page = pages.getByIndex(j)
               text.insertString(cursor, page.Name + '\t' + str(page_count), False)
	       text.insertControlCharacter(cursor, LINE_BREAK, False)
	       page_count += 1

	   text.insertControlCharacter(cursor, PARAGRAPH_BREAK, False)

    newdoc.storeAsURL(destFile, ())
    newdoc.dispose()

main()
